# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import bess_msg_pb2 as bess__msg__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='service.proto',
  package='bess.pb',
  syntax='proto3',
  serialized_pb=_b('\n\rservice.proto\x12\x07\x62\x65ss.pb\x1a\x0e\x62\x65ss_msg.proto2\xd2\x1b\n\x0b\x42\x45SSControl\x12?\n\nGetVersion\x12\x15.bess.pb.EmptyRequest\x1a\x18.bess.pb.VersionResponse\"\x00\x12;\n\x08ResetAll\x12\x15.bess.pb.EmptyRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12;\n\x08KillBess\x12\x15.bess.pb.EmptyRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12\x46\n\x0cImportPlugin\x12\x1c.bess.pb.ImportPluginRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12\x46\n\x0cUnloadPlugin\x12\x1c.bess.pb.UnloadPluginRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12\x44\n\x0bListPlugins\x12\x15.bess.pb.EmptyRequest\x1a\x1c.bess.pb.ListPluginsResponse\"\x00\x12;\n\x08PauseAll\x12\x15.bess.pb.EmptyRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12\x44\n\x0bPauseWorker\x12\x1b.bess.pb.PauseWorkerRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12\x46\n\x0cResumeWorker\x12\x1c.bess.pb.ResumeWorkerRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12<\n\tResumeAll\x12\x15.bess.pb.EmptyRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12?\n\x0cResetWorkers\x12\x15.bess.pb.EmptyRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12\x44\n\x0bListWorkers\x12\x15.bess.pb.EmptyRequest\x1a\x1c.bess.pb.ListWorkersResponse\"\x00\x12@\n\tAddWorker\x12\x19.bess.pb.AddWorkerRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12H\n\rDestroyWorker\x12\x1d.bess.pb.DestroyWorkerRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12;\n\x08ResetTcs\x12\x15.bess.pb.EmptyRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12>\n\x07ListTcs\x12\x17.bess.pb.ListTcsRequest\x1a\x18.bess.pb.ListTcsResponse\"\x00\x12\x62\n\x1a\x43heckSchedulingConstraints\x12\x15.bess.pb.EmptyRequest\x1a+.bess.pb.CheckSchedulingConstraintsResponse\"\x00\x12\x38\n\x05\x41\x64\x64Tc\x12\x15.bess.pb.AddTcRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12J\n\x0eUpdateTcParams\x12\x1e.bess.pb.UpdateTcParamsRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12J\n\x0eUpdateTcParent\x12\x1e.bess.pb.UpdateTcParentRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12G\n\nGetTcStats\x12\x1a.bess.pb.GetTcStatsRequest\x1a\x1b.bess.pb.GetTcStatsResponse\"\x00\x12\x44\n\x0bListDrivers\x12\x15.bess.pb.EmptyRequest\x1a\x1c.bess.pb.ListDriversResponse\"\x00\x12P\n\rGetDriverInfo\x12\x1d.bess.pb.GetDriverInfoRequest\x1a\x1e.bess.pb.GetDriverInfoResponse\"\x00\x12=\n\nResetPorts\x12\x15.bess.pb.EmptyRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12@\n\tListPorts\x12\x15.bess.pb.EmptyRequest\x1a\x1a.bess.pb.ListPortsResponse\"\x00\x12G\n\nCreatePort\x12\x1a.bess.pb.CreatePortRequest\x1a\x1b.bess.pb.CreatePortResponse\"\x00\x12\x44\n\x0b\x44\x65stroyPort\x12\x1b.bess.pb.DestroyPortRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12\x44\n\x0bSetPortConf\x12\x1b.bess.pb.SetPortConfRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12J\n\x0bGetPortConf\x12\x1b.bess.pb.GetPortConfRequest\x1a\x1c.bess.pb.GetPortConfResponse\"\x00\x12M\n\x0cGetPortStats\x12\x1c.bess.pb.GetPortStatsRequest\x1a\x1d.bess.pb.GetPortStatsResponse\"\x00\x12P\n\rGetLinkStatus\x12\x1d.bess.pb.GetLinkStatusRequest\x1a\x1e.bess.pb.GetLinkStatusResponse\"\x00\x12\x42\n\nListMclass\x12\x15.bess.pb.EmptyRequest\x1a\x1b.bess.pb.ListMclassResponse\"\x00\x12P\n\rGetMclassInfo\x12\x1d.bess.pb.GetMclassInfoRequest\x1a\x1e.bess.pb.GetMclassInfoResponse\"\x00\x12?\n\x0cResetModules\x12\x15.bess.pb.EmptyRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12\x44\n\x0bListModules\x12\x15.bess.pb.EmptyRequest\x1a\x1c.bess.pb.ListModulesResponse\"\x00\x12M\n\x0c\x43reateModule\x12\x1c.bess.pb.CreateModuleRequest\x1a\x1d.bess.pb.CreateModuleResponse\"\x00\x12H\n\rDestroyModule\x12\x1d.bess.pb.DestroyModuleRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12P\n\rGetModuleInfo\x12\x1d.bess.pb.GetModuleInfoRequest\x1a\x1e.bess.pb.GetModuleInfoResponse\"\x00\x12J\n\x0e\x43onnectModules\x12\x1e.bess.pb.ConnectModulesRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12P\n\x11\x44isconnectModules\x12!.bess.pb.DisconnectModulesRequest\x1a\x16.bess.pb.EmptyResponse\"\x00\x12J\n\x0b\x44umpMempool\x12\x1b.bess.pb.DumpMempoolRequest\x1a\x1c.bess.pb.DumpMempoolResponse\"\x00\x12\x44\n\rModuleCommand\x12\x17.bess.pb.CommandRequest\x1a\x18.bess.pb.CommandResponse\"\x00\x12P\n\x11ListGateHookClass\x12\x15.bess.pb.EmptyRequest\x1a\".bess.pb.ListGateHookClassResponse\"\x00\x12\x65\n\x14GetGateHookClassInfo\x12$.bess.pb.GetGateHookClassInfoRequest\x1a%.bess.pb.GetGateHookClassInfoResponse\"\x00\x12\\\n\x11\x43onfigureGateHook\x12!.bess.pb.ConfigureGateHookRequest\x1a\".bess.pb.ConfigureGateHookResponse\"\x00\x12H\n\rListGateHooks\x12\x15.bess.pb.EmptyRequest\x1a\x1e.bess.pb.ListGateHooksResponse\"\x00\x12N\n\x0fGateHookCommand\x12\x1f.bess.pb.GateHookCommandRequest\x1a\x18.bess.pb.CommandResponse\"\x00\x12V\n\x13\x43onfigureResumeHook\x12#.bess.pb.ConfigureResumeHookRequest\x1a\x18.bess.pb.CommandResponse\"\x00\x62\x06proto3')
  ,
  dependencies=[bess__msg__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class BESSControlStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetVersion = channel.unary_unary(
          '/bess.pb.BESSControl/GetVersion',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.VersionResponse.FromString,
          )
      self.ResetAll = channel.unary_unary(
          '/bess.pb.BESSControl/ResetAll',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.KillBess = channel.unary_unary(
          '/bess.pb.BESSControl/KillBess',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ImportPlugin = channel.unary_unary(
          '/bess.pb.BESSControl/ImportPlugin',
          request_serializer=bess__msg__pb2.ImportPluginRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.UnloadPlugin = channel.unary_unary(
          '/bess.pb.BESSControl/UnloadPlugin',
          request_serializer=bess__msg__pb2.UnloadPluginRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ListPlugins = channel.unary_unary(
          '/bess.pb.BESSControl/ListPlugins',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ListPluginsResponse.FromString,
          )
      self.PauseAll = channel.unary_unary(
          '/bess.pb.BESSControl/PauseAll',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.PauseWorker = channel.unary_unary(
          '/bess.pb.BESSControl/PauseWorker',
          request_serializer=bess__msg__pb2.PauseWorkerRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ResumeWorker = channel.unary_unary(
          '/bess.pb.BESSControl/ResumeWorker',
          request_serializer=bess__msg__pb2.ResumeWorkerRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ResumeAll = channel.unary_unary(
          '/bess.pb.BESSControl/ResumeAll',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ResetWorkers = channel.unary_unary(
          '/bess.pb.BESSControl/ResetWorkers',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ListWorkers = channel.unary_unary(
          '/bess.pb.BESSControl/ListWorkers',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ListWorkersResponse.FromString,
          )
      self.AddWorker = channel.unary_unary(
          '/bess.pb.BESSControl/AddWorker',
          request_serializer=bess__msg__pb2.AddWorkerRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.DestroyWorker = channel.unary_unary(
          '/bess.pb.BESSControl/DestroyWorker',
          request_serializer=bess__msg__pb2.DestroyWorkerRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ResetTcs = channel.unary_unary(
          '/bess.pb.BESSControl/ResetTcs',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ListTcs = channel.unary_unary(
          '/bess.pb.BESSControl/ListTcs',
          request_serializer=bess__msg__pb2.ListTcsRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ListTcsResponse.FromString,
          )
      self.CheckSchedulingConstraints = channel.unary_unary(
          '/bess.pb.BESSControl/CheckSchedulingConstraints',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.CheckSchedulingConstraintsResponse.FromString,
          )
      self.AddTc = channel.unary_unary(
          '/bess.pb.BESSControl/AddTc',
          request_serializer=bess__msg__pb2.AddTcRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.UpdateTcParams = channel.unary_unary(
          '/bess.pb.BESSControl/UpdateTcParams',
          request_serializer=bess__msg__pb2.UpdateTcParamsRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.UpdateTcParent = channel.unary_unary(
          '/bess.pb.BESSControl/UpdateTcParent',
          request_serializer=bess__msg__pb2.UpdateTcParentRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.GetTcStats = channel.unary_unary(
          '/bess.pb.BESSControl/GetTcStats',
          request_serializer=bess__msg__pb2.GetTcStatsRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.GetTcStatsResponse.FromString,
          )
      self.ListDrivers = channel.unary_unary(
          '/bess.pb.BESSControl/ListDrivers',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ListDriversResponse.FromString,
          )
      self.GetDriverInfo = channel.unary_unary(
          '/bess.pb.BESSControl/GetDriverInfo',
          request_serializer=bess__msg__pb2.GetDriverInfoRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.GetDriverInfoResponse.FromString,
          )
      self.ResetPorts = channel.unary_unary(
          '/bess.pb.BESSControl/ResetPorts',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ListPorts = channel.unary_unary(
          '/bess.pb.BESSControl/ListPorts',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ListPortsResponse.FromString,
          )
      self.CreatePort = channel.unary_unary(
          '/bess.pb.BESSControl/CreatePort',
          request_serializer=bess__msg__pb2.CreatePortRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.CreatePortResponse.FromString,
          )
      self.DestroyPort = channel.unary_unary(
          '/bess.pb.BESSControl/DestroyPort',
          request_serializer=bess__msg__pb2.DestroyPortRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.SetPortConf = channel.unary_unary(
          '/bess.pb.BESSControl/SetPortConf',
          request_serializer=bess__msg__pb2.SetPortConfRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.GetPortConf = channel.unary_unary(
          '/bess.pb.BESSControl/GetPortConf',
          request_serializer=bess__msg__pb2.GetPortConfRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.GetPortConfResponse.FromString,
          )
      self.GetPortStats = channel.unary_unary(
          '/bess.pb.BESSControl/GetPortStats',
          request_serializer=bess__msg__pb2.GetPortStatsRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.GetPortStatsResponse.FromString,
          )
      self.GetLinkStatus = channel.unary_unary(
          '/bess.pb.BESSControl/GetLinkStatus',
          request_serializer=bess__msg__pb2.GetLinkStatusRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.GetLinkStatusResponse.FromString,
          )
      self.ListMclass = channel.unary_unary(
          '/bess.pb.BESSControl/ListMclass',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ListMclassResponse.FromString,
          )
      self.GetMclassInfo = channel.unary_unary(
          '/bess.pb.BESSControl/GetMclassInfo',
          request_serializer=bess__msg__pb2.GetMclassInfoRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.GetMclassInfoResponse.FromString,
          )
      self.ResetModules = channel.unary_unary(
          '/bess.pb.BESSControl/ResetModules',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.ListModules = channel.unary_unary(
          '/bess.pb.BESSControl/ListModules',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ListModulesResponse.FromString,
          )
      self.CreateModule = channel.unary_unary(
          '/bess.pb.BESSControl/CreateModule',
          request_serializer=bess__msg__pb2.CreateModuleRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.CreateModuleResponse.FromString,
          )
      self.DestroyModule = channel.unary_unary(
          '/bess.pb.BESSControl/DestroyModule',
          request_serializer=bess__msg__pb2.DestroyModuleRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.GetModuleInfo = channel.unary_unary(
          '/bess.pb.BESSControl/GetModuleInfo',
          request_serializer=bess__msg__pb2.GetModuleInfoRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.GetModuleInfoResponse.FromString,
          )
      self.ConnectModules = channel.unary_unary(
          '/bess.pb.BESSControl/ConnectModules',
          request_serializer=bess__msg__pb2.ConnectModulesRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.DisconnectModules = channel.unary_unary(
          '/bess.pb.BESSControl/DisconnectModules',
          request_serializer=bess__msg__pb2.DisconnectModulesRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.EmptyResponse.FromString,
          )
      self.DumpMempool = channel.unary_unary(
          '/bess.pb.BESSControl/DumpMempool',
          request_serializer=bess__msg__pb2.DumpMempoolRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.DumpMempoolResponse.FromString,
          )
      self.ModuleCommand = channel.unary_unary(
          '/bess.pb.BESSControl/ModuleCommand',
          request_serializer=bess__msg__pb2.CommandRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.CommandResponse.FromString,
          )
      self.ListGateHookClass = channel.unary_unary(
          '/bess.pb.BESSControl/ListGateHookClass',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ListGateHookClassResponse.FromString,
          )
      self.GetGateHookClassInfo = channel.unary_unary(
          '/bess.pb.BESSControl/GetGateHookClassInfo',
          request_serializer=bess__msg__pb2.GetGateHookClassInfoRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.GetGateHookClassInfoResponse.FromString,
          )
      self.ConfigureGateHook = channel.unary_unary(
          '/bess.pb.BESSControl/ConfigureGateHook',
          request_serializer=bess__msg__pb2.ConfigureGateHookRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ConfigureGateHookResponse.FromString,
          )
      self.ListGateHooks = channel.unary_unary(
          '/bess.pb.BESSControl/ListGateHooks',
          request_serializer=bess__msg__pb2.EmptyRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.ListGateHooksResponse.FromString,
          )
      self.GateHookCommand = channel.unary_unary(
          '/bess.pb.BESSControl/GateHookCommand',
          request_serializer=bess__msg__pb2.GateHookCommandRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.CommandResponse.FromString,
          )
      self.ConfigureResumeHook = channel.unary_unary(
          '/bess.pb.BESSControl/ConfigureResumeHook',
          request_serializer=bess__msg__pb2.ConfigureResumeHookRequest.SerializeToString,
          response_deserializer=bess__msg__pb2.CommandResponse.FromString,
          )


  class BESSControlServicer(object):

    def GetVersion(self, request, context):
      """-------------------------------------------------------------------------
      System
      -------------------------------------------------------------------------

      / Query version of bessd
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ResetAll(self, request, context):
      """/ Reset the current packet processing datapath to the initial state.
      /
      / This command is identical to the following sequence:
      /   ResetModules()
      /   ResetPorts()
      /   ResetTcs()
      /   ResetWorkers()
      / As it clears everything, BESS should appear as if the daemon has freshly
      / started (if not, it is a bug; please report).
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def KillBess(self, request, context):
      """/ Terminate the BESS daemon.
      /
      / BESS daemon shuts off in a graceful manner. Note that this command is
      / "asynchronous": this command doesn't block until the BESS daemon has
      / shut off.
      /
      / NOTE: There should be no running worker to run this command.
      / FIXME: rename (e.g., Terminate)
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ImportPlugin(self, request, context):
      """/ Import a plugin
      /
      / At the moment plugins can only contain module types,
      / but might also support drivers/hooks/schedulers in the future.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UnloadPlugin(self, request, context):
      """/ Unload a plugin
      /
      / At the moment plugins can only contain module types,
      / but might also support drivers/hooks/schedulers in the future.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListPlugins(self, request, context):
      """/ List imported plugins
      /
      / At the moment plugins can only contain module types,
      / but might also support drivers/hooks/schedulers in the future.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PauseAll(self, request, context):
      """-------------------------------------------------------------------------
      Worker
      -------------------------------------------------------------------------

      / Pause all running workers temporarily
      /
      / Some RPC commands to BESS or individual modules/ports require that
      / threads must be inactive, to avoid race conditions.
      / For such commands, use PauseALl at the beginning and ResumeAll at the end.
      /  PauseAll()
      /   SomeCommand1()
      /   SomeCommand2()
      /   ...
      /  ResumeAll()
      / Keep the duration as short as possible, to avoid packet drops.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PauseWorker(self, request, context):
      """/ Pause the specified worker temporarily
      /
      / Some RPC commands to BESS or individual modules/ports require that
      / threads must be inactive, to avoid race conditions.
      / For such commands, use PauseWorker at the beginning and ResumeWorker at the end.
      /  PauseWorker(0)
      /   SomeCommand1()
      /   SomeCommand2()
      /   ...
      /  ResumeWorker(0)
      / Keep the duration as short as possible, to avoid packet drops.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ResumeWorker(self, request, context):
      """/ Resume the specified worker
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ResumeAll(self, request, context):
      """/ Resume all paused workers
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ResetWorkers(self, request, context):
      """/ Remove all existing workers
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListWorkers(self, request, context):
      """/ Enumerate all existing workers
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AddWorker(self, request, context):
      """/ Create a new worker
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DestroyWorker(self, request, context):
      """/ Remove a single worker
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ResetTcs(self, request, context):
      """-------------------------------------------------------------------------
      Traffic classe & task
      -------------------------------------------------------------------------

      / Remove all existing traffic classes
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListTcs(self, request, context):
      """/ Enumerate all existing workers
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CheckSchedulingConstraints(self, request, context):
      """/ Check scheduling contraints
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AddTc(self, request, context):
      """/ Create a new traffic class
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateTcParams(self, request, context):
      """/ Update parameters of an existing traffic class
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateTcParent(self, request, context):
      """/ Change parent (and child arguments) of an existing traffic class
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetTcStats(self, request, context):
      """/ Collect statistics of a traffic class
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListDrivers(self, request, context):
      """-------------------------------------------------------------------------
      Port
      -------------------------------------------------------------------------

      / Enumerate all port drivers available
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetDriverInfo(self, request, context):
      """/ Query detailed information of a port driver
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ResetPorts(self, request, context):
      """/ Remove all initialized ports
      /
      / Will fail if there are modules that are still using ports.
      / (e.g., PortInc, PortOut, QueueInc, QueueOut)
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListPorts(self, request, context):
      """/ Enumerate all initialized ports
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreatePort(self, request, context):
      """/ Create a new port from the specified driver
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DestroyPort(self, request, context):
      """/ Remove a port
      /
      / The port should not be being used by a port-related module.
      / (e.g., PortInc, PortOut, QueueInc, QueueOut)
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetPortConf(self, request, context):
      """/ Runtime-updatable configuration
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetPortConf(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetPortStats(self, request, context):
      """/ Collect port statistics
      /
      / At the moment, per-queue stats are not supported.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetLinkStatus(self, request, context):
      """/ Query link status
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListMclass(self, request, context):
      """TODO: Add PortCommand, like ModuleCommand, which performs driver-specific
      actions on a port.

      -------------------------------------------------------------------------
      Module
      -------------------------------------------------------------------------

      / Enumerate all module types available
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetMclassInfo(self, request, context):
      """/ Query detailed information of a module type
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ResetModules(self, request, context):
      """/ Remove all modules.
      /
      / This RPC will always succeed (unless there is a running worker)
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListModules(self, request, context):
      """/ Enumerate all initialized modules
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreateModule(self, request, context):
      """/ Create a new module instance from the given module type
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DestroyModule(self, request, context):
      """/ Destroy an exsting module
      /
      / If the module is connected to other modules' input/output gate, they are
      / disconnected first. All tasks created by the module will also be destoyed.
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetModuleInfo(self, request, context):
      """/ Fetch detailed information of an module instance
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ConnectModules(self, request, context):
      """/ Connect two modules.
      /
      / Connect between m1's ogate and n2's igate (i.e., ackets sent to m1's ogate
      / will be fed to m2's igate). The oate can be connected to only one igate,
      / while the igate can be connected to multiple output gates.
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DisconnectModules(self, request, context):
      """/ Disconnect two modules.
      /
      / It removes a connection between two modules (you specify the previous one
      / and its output gate). All packets coming out from the ogate will be
      / dropped. Once disconnected, the ogate can be connected
      / to any input gate.
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DumpMempool(self, request, context):
      """/ Dump various stats about BESS's packet pools
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ModuleCommand(self, request, context):
      """/ Send a command to the specified module instance.
      /
      / Each module type defines a list of modyle-specific commands, which
      / allow external programs to communicate with the module at runtime.
      / See module_msg.proto for details.
      /
      / NOTE: Some commands cannot be used if there are running workers.
      /       For those commands you must pause all workers first.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListGateHookClass(self, request, context):
      """-------------------------------------------------------------------------
      Gate hooks
      -------------------------------------------------------------------------

      / Enumerate all gatehook types available
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetGateHookClassInfo(self, request, context):
      """/ Query detailed information of a gatehook type
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ConfigureGateHook(self, request, context):
      """/ Enable/Disable a gate hook.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListGateHooks(self, request, context):
      """/ Enumerate all gatehook installed
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GateHookCommand(self, request, context):
      """/ Send command to gate hook instance.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ConfigureResumeHook(self, request, context):
      """-------------------------------------------------------------------------
      Resume hooks
      -------------------------------------------------------------------------

      / Enable/Disable a resume hook.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_BESSControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetVersion': grpc.unary_unary_rpc_method_handler(
            servicer.GetVersion,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.VersionResponse.SerializeToString,
        ),
        'ResetAll': grpc.unary_unary_rpc_method_handler(
            servicer.ResetAll,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'KillBess': grpc.unary_unary_rpc_method_handler(
            servicer.KillBess,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ImportPlugin': grpc.unary_unary_rpc_method_handler(
            servicer.ImportPlugin,
            request_deserializer=bess__msg__pb2.ImportPluginRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'UnloadPlugin': grpc.unary_unary_rpc_method_handler(
            servicer.UnloadPlugin,
            request_deserializer=bess__msg__pb2.UnloadPluginRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ListPlugins': grpc.unary_unary_rpc_method_handler(
            servicer.ListPlugins,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.ListPluginsResponse.SerializeToString,
        ),
        'PauseAll': grpc.unary_unary_rpc_method_handler(
            servicer.PauseAll,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'PauseWorker': grpc.unary_unary_rpc_method_handler(
            servicer.PauseWorker,
            request_deserializer=bess__msg__pb2.PauseWorkerRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ResumeWorker': grpc.unary_unary_rpc_method_handler(
            servicer.ResumeWorker,
            request_deserializer=bess__msg__pb2.ResumeWorkerRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ResumeAll': grpc.unary_unary_rpc_method_handler(
            servicer.ResumeAll,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ResetWorkers': grpc.unary_unary_rpc_method_handler(
            servicer.ResetWorkers,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ListWorkers': grpc.unary_unary_rpc_method_handler(
            servicer.ListWorkers,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.ListWorkersResponse.SerializeToString,
        ),
        'AddWorker': grpc.unary_unary_rpc_method_handler(
            servicer.AddWorker,
            request_deserializer=bess__msg__pb2.AddWorkerRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'DestroyWorker': grpc.unary_unary_rpc_method_handler(
            servicer.DestroyWorker,
            request_deserializer=bess__msg__pb2.DestroyWorkerRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ResetTcs': grpc.unary_unary_rpc_method_handler(
            servicer.ResetTcs,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ListTcs': grpc.unary_unary_rpc_method_handler(
            servicer.ListTcs,
            request_deserializer=bess__msg__pb2.ListTcsRequest.FromString,
            response_serializer=bess__msg__pb2.ListTcsResponse.SerializeToString,
        ),
        'CheckSchedulingConstraints': grpc.unary_unary_rpc_method_handler(
            servicer.CheckSchedulingConstraints,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.CheckSchedulingConstraintsResponse.SerializeToString,
        ),
        'AddTc': grpc.unary_unary_rpc_method_handler(
            servicer.AddTc,
            request_deserializer=bess__msg__pb2.AddTcRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'UpdateTcParams': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateTcParams,
            request_deserializer=bess__msg__pb2.UpdateTcParamsRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'UpdateTcParent': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateTcParent,
            request_deserializer=bess__msg__pb2.UpdateTcParentRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'GetTcStats': grpc.unary_unary_rpc_method_handler(
            servicer.GetTcStats,
            request_deserializer=bess__msg__pb2.GetTcStatsRequest.FromString,
            response_serializer=bess__msg__pb2.GetTcStatsResponse.SerializeToString,
        ),
        'ListDrivers': grpc.unary_unary_rpc_method_handler(
            servicer.ListDrivers,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.ListDriversResponse.SerializeToString,
        ),
        'GetDriverInfo': grpc.unary_unary_rpc_method_handler(
            servicer.GetDriverInfo,
            request_deserializer=bess__msg__pb2.GetDriverInfoRequest.FromString,
            response_serializer=bess__msg__pb2.GetDriverInfoResponse.SerializeToString,
        ),
        'ResetPorts': grpc.unary_unary_rpc_method_handler(
            servicer.ResetPorts,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ListPorts': grpc.unary_unary_rpc_method_handler(
            servicer.ListPorts,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.ListPortsResponse.SerializeToString,
        ),
        'CreatePort': grpc.unary_unary_rpc_method_handler(
            servicer.CreatePort,
            request_deserializer=bess__msg__pb2.CreatePortRequest.FromString,
            response_serializer=bess__msg__pb2.CreatePortResponse.SerializeToString,
        ),
        'DestroyPort': grpc.unary_unary_rpc_method_handler(
            servicer.DestroyPort,
            request_deserializer=bess__msg__pb2.DestroyPortRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'SetPortConf': grpc.unary_unary_rpc_method_handler(
            servicer.SetPortConf,
            request_deserializer=bess__msg__pb2.SetPortConfRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'GetPortConf': grpc.unary_unary_rpc_method_handler(
            servicer.GetPortConf,
            request_deserializer=bess__msg__pb2.GetPortConfRequest.FromString,
            response_serializer=bess__msg__pb2.GetPortConfResponse.SerializeToString,
        ),
        'GetPortStats': grpc.unary_unary_rpc_method_handler(
            servicer.GetPortStats,
            request_deserializer=bess__msg__pb2.GetPortStatsRequest.FromString,
            response_serializer=bess__msg__pb2.GetPortStatsResponse.SerializeToString,
        ),
        'GetLinkStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetLinkStatus,
            request_deserializer=bess__msg__pb2.GetLinkStatusRequest.FromString,
            response_serializer=bess__msg__pb2.GetLinkStatusResponse.SerializeToString,
        ),
        'ListMclass': grpc.unary_unary_rpc_method_handler(
            servicer.ListMclass,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.ListMclassResponse.SerializeToString,
        ),
        'GetMclassInfo': grpc.unary_unary_rpc_method_handler(
            servicer.GetMclassInfo,
            request_deserializer=bess__msg__pb2.GetMclassInfoRequest.FromString,
            response_serializer=bess__msg__pb2.GetMclassInfoResponse.SerializeToString,
        ),
        'ResetModules': grpc.unary_unary_rpc_method_handler(
            servicer.ResetModules,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'ListModules': grpc.unary_unary_rpc_method_handler(
            servicer.ListModules,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.ListModulesResponse.SerializeToString,
        ),
        'CreateModule': grpc.unary_unary_rpc_method_handler(
            servicer.CreateModule,
            request_deserializer=bess__msg__pb2.CreateModuleRequest.FromString,
            response_serializer=bess__msg__pb2.CreateModuleResponse.SerializeToString,
        ),
        'DestroyModule': grpc.unary_unary_rpc_method_handler(
            servicer.DestroyModule,
            request_deserializer=bess__msg__pb2.DestroyModuleRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'GetModuleInfo': grpc.unary_unary_rpc_method_handler(
            servicer.GetModuleInfo,
            request_deserializer=bess__msg__pb2.GetModuleInfoRequest.FromString,
            response_serializer=bess__msg__pb2.GetModuleInfoResponse.SerializeToString,
        ),
        'ConnectModules': grpc.unary_unary_rpc_method_handler(
            servicer.ConnectModules,
            request_deserializer=bess__msg__pb2.ConnectModulesRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'DisconnectModules': grpc.unary_unary_rpc_method_handler(
            servicer.DisconnectModules,
            request_deserializer=bess__msg__pb2.DisconnectModulesRequest.FromString,
            response_serializer=bess__msg__pb2.EmptyResponse.SerializeToString,
        ),
        'DumpMempool': grpc.unary_unary_rpc_method_handler(
            servicer.DumpMempool,
            request_deserializer=bess__msg__pb2.DumpMempoolRequest.FromString,
            response_serializer=bess__msg__pb2.DumpMempoolResponse.SerializeToString,
        ),
        'ModuleCommand': grpc.unary_unary_rpc_method_handler(
            servicer.ModuleCommand,
            request_deserializer=bess__msg__pb2.CommandRequest.FromString,
            response_serializer=bess__msg__pb2.CommandResponse.SerializeToString,
        ),
        'ListGateHookClass': grpc.unary_unary_rpc_method_handler(
            servicer.ListGateHookClass,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.ListGateHookClassResponse.SerializeToString,
        ),
        'GetGateHookClassInfo': grpc.unary_unary_rpc_method_handler(
            servicer.GetGateHookClassInfo,
            request_deserializer=bess__msg__pb2.GetGateHookClassInfoRequest.FromString,
            response_serializer=bess__msg__pb2.GetGateHookClassInfoResponse.SerializeToString,
        ),
        'ConfigureGateHook': grpc.unary_unary_rpc_method_handler(
            servicer.ConfigureGateHook,
            request_deserializer=bess__msg__pb2.ConfigureGateHookRequest.FromString,
            response_serializer=bess__msg__pb2.ConfigureGateHookResponse.SerializeToString,
        ),
        'ListGateHooks': grpc.unary_unary_rpc_method_handler(
            servicer.ListGateHooks,
            request_deserializer=bess__msg__pb2.EmptyRequest.FromString,
            response_serializer=bess__msg__pb2.ListGateHooksResponse.SerializeToString,
        ),
        'GateHookCommand': grpc.unary_unary_rpc_method_handler(
            servicer.GateHookCommand,
            request_deserializer=bess__msg__pb2.GateHookCommandRequest.FromString,
            response_serializer=bess__msg__pb2.CommandResponse.SerializeToString,
        ),
        'ConfigureResumeHook': grpc.unary_unary_rpc_method_handler(
            servicer.ConfigureResumeHook,
            request_deserializer=bess__msg__pb2.ConfigureResumeHookRequest.FromString,
            response_serializer=bess__msg__pb2.CommandResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'bess.pb.BESSControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaBESSControlServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetVersion(self, request, context):
      """-------------------------------------------------------------------------
      System
      -------------------------------------------------------------------------

      / Query version of bessd
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ResetAll(self, request, context):
      """/ Reset the current packet processing datapath to the initial state.
      /
      / This command is identical to the following sequence:
      /   ResetModules()
      /   ResetPorts()
      /   ResetTcs()
      /   ResetWorkers()
      / As it clears everything, BESS should appear as if the daemon has freshly
      / started (if not, it is a bug; please report).
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def KillBess(self, request, context):
      """/ Terminate the BESS daemon.
      /
      / BESS daemon shuts off in a graceful manner. Note that this command is
      / "asynchronous": this command doesn't block until the BESS daemon has
      / shut off.
      /
      / NOTE: There should be no running worker to run this command.
      / FIXME: rename (e.g., Terminate)
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ImportPlugin(self, request, context):
      """/ Import a plugin
      /
      / At the moment plugins can only contain module types,
      / but might also support drivers/hooks/schedulers in the future.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UnloadPlugin(self, request, context):
      """/ Unload a plugin
      /
      / At the moment plugins can only contain module types,
      / but might also support drivers/hooks/schedulers in the future.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListPlugins(self, request, context):
      """/ List imported plugins
      /
      / At the moment plugins can only contain module types,
      / but might also support drivers/hooks/schedulers in the future.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PauseAll(self, request, context):
      """-------------------------------------------------------------------------
      Worker
      -------------------------------------------------------------------------

      / Pause all running workers temporarily
      /
      / Some RPC commands to BESS or individual modules/ports require that
      / threads must be inactive, to avoid race conditions.
      / For such commands, use PauseALl at the beginning and ResumeAll at the end.
      /  PauseAll()
      /   SomeCommand1()
      /   SomeCommand2()
      /   ...
      /  ResumeAll()
      / Keep the duration as short as possible, to avoid packet drops.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PauseWorker(self, request, context):
      """/ Pause the specified worker temporarily
      /
      / Some RPC commands to BESS or individual modules/ports require that
      / threads must be inactive, to avoid race conditions.
      / For such commands, use PauseWorker at the beginning and ResumeWorker at the end.
      /  PauseWorker(0)
      /   SomeCommand1()
      /   SomeCommand2()
      /   ...
      /  ResumeWorker(0)
      / Keep the duration as short as possible, to avoid packet drops.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ResumeWorker(self, request, context):
      """/ Resume the specified worker
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ResumeAll(self, request, context):
      """/ Resume all paused workers
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ResetWorkers(self, request, context):
      """/ Remove all existing workers
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListWorkers(self, request, context):
      """/ Enumerate all existing workers
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AddWorker(self, request, context):
      """/ Create a new worker
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DestroyWorker(self, request, context):
      """/ Remove a single worker
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ResetTcs(self, request, context):
      """-------------------------------------------------------------------------
      Traffic classe & task
      -------------------------------------------------------------------------

      / Remove all existing traffic classes
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListTcs(self, request, context):
      """/ Enumerate all existing workers
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CheckSchedulingConstraints(self, request, context):
      """/ Check scheduling contraints
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AddTc(self, request, context):
      """/ Create a new traffic class
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateTcParams(self, request, context):
      """/ Update parameters of an existing traffic class
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateTcParent(self, request, context):
      """/ Change parent (and child arguments) of an existing traffic class
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetTcStats(self, request, context):
      """/ Collect statistics of a traffic class
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListDrivers(self, request, context):
      """-------------------------------------------------------------------------
      Port
      -------------------------------------------------------------------------

      / Enumerate all port drivers available
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetDriverInfo(self, request, context):
      """/ Query detailed information of a port driver
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ResetPorts(self, request, context):
      """/ Remove all initialized ports
      /
      / Will fail if there are modules that are still using ports.
      / (e.g., PortInc, PortOut, QueueInc, QueueOut)
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListPorts(self, request, context):
      """/ Enumerate all initialized ports
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreatePort(self, request, context):
      """/ Create a new port from the specified driver
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DestroyPort(self, request, context):
      """/ Remove a port
      /
      / The port should not be being used by a port-related module.
      / (e.g., PortInc, PortOut, QueueInc, QueueOut)
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetPortConf(self, request, context):
      """/ Runtime-updatable configuration
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetPortConf(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetPortStats(self, request, context):
      """/ Collect port statistics
      /
      / At the moment, per-queue stats are not supported.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetLinkStatus(self, request, context):
      """/ Query link status
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListMclass(self, request, context):
      """TODO: Add PortCommand, like ModuleCommand, which performs driver-specific
      actions on a port.

      -------------------------------------------------------------------------
      Module
      -------------------------------------------------------------------------

      / Enumerate all module types available
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetMclassInfo(self, request, context):
      """/ Query detailed information of a module type
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ResetModules(self, request, context):
      """/ Remove all modules.
      /
      / This RPC will always succeed (unless there is a running worker)
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListModules(self, request, context):
      """/ Enumerate all initialized modules
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreateModule(self, request, context):
      """/ Create a new module instance from the given module type
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DestroyModule(self, request, context):
      """/ Destroy an exsting module
      /
      / If the module is connected to other modules' input/output gate, they are
      / disconnected first. All tasks created by the module will also be destoyed.
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetModuleInfo(self, request, context):
      """/ Fetch detailed information of an module instance
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ConnectModules(self, request, context):
      """/ Connect two modules.
      /
      / Connect between m1's ogate and n2's igate (i.e., ackets sent to m1's ogate
      / will be fed to m2's igate). The oate can be connected to only one igate,
      / while the igate can be connected to multiple output gates.
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DisconnectModules(self, request, context):
      """/ Disconnect two modules.
      /
      / It removes a connection between two modules (you specify the previous one
      / and its output gate). All packets coming out from the ogate will be
      / dropped. Once disconnected, the ogate can be connected
      / to any input gate.
      /
      / NOTE: There should be no running worker to run this command.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DumpMempool(self, request, context):
      """/ Dump various stats about BESS's packet pools
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ModuleCommand(self, request, context):
      """/ Send a command to the specified module instance.
      /
      / Each module type defines a list of modyle-specific commands, which
      / allow external programs to communicate with the module at runtime.
      / See module_msg.proto for details.
      /
      / NOTE: Some commands cannot be used if there are running workers.
      /       For those commands you must pause all workers first.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListGateHookClass(self, request, context):
      """-------------------------------------------------------------------------
      Gate hooks
      -------------------------------------------------------------------------

      / Enumerate all gatehook types available
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetGateHookClassInfo(self, request, context):
      """/ Query detailed information of a gatehook type
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ConfigureGateHook(self, request, context):
      """/ Enable/Disable a gate hook.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListGateHooks(self, request, context):
      """/ Enumerate all gatehook installed
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GateHookCommand(self, request, context):
      """/ Send command to gate hook instance.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ConfigureResumeHook(self, request, context):
      """-------------------------------------------------------------------------
      Resume hooks
      -------------------------------------------------------------------------

      / Enable/Disable a resume hook.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaBESSControlStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetVersion(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """-------------------------------------------------------------------------
      System
      -------------------------------------------------------------------------

      / Query version of bessd
      """
      raise NotImplementedError()
    GetVersion.future = None
    def ResetAll(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Reset the current packet processing datapath to the initial state.
      /
      / This command is identical to the following sequence:
      /   ResetModules()
      /   ResetPorts()
      /   ResetTcs()
      /   ResetWorkers()
      / As it clears everything, BESS should appear as if the daemon has freshly
      / started (if not, it is a bug; please report).
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    ResetAll.future = None
    def KillBess(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Terminate the BESS daemon.
      /
      / BESS daemon shuts off in a graceful manner. Note that this command is
      / "asynchronous": this command doesn't block until the BESS daemon has
      / shut off.
      /
      / NOTE: There should be no running worker to run this command.
      / FIXME: rename (e.g., Terminate)
      """
      raise NotImplementedError()
    KillBess.future = None
    def ImportPlugin(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Import a plugin
      /
      / At the moment plugins can only contain module types,
      / but might also support drivers/hooks/schedulers in the future.
      """
      raise NotImplementedError()
    ImportPlugin.future = None
    def UnloadPlugin(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Unload a plugin
      /
      / At the moment plugins can only contain module types,
      / but might also support drivers/hooks/schedulers in the future.
      """
      raise NotImplementedError()
    UnloadPlugin.future = None
    def ListPlugins(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ List imported plugins
      /
      / At the moment plugins can only contain module types,
      / but might also support drivers/hooks/schedulers in the future.
      """
      raise NotImplementedError()
    ListPlugins.future = None
    def PauseAll(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """-------------------------------------------------------------------------
      Worker
      -------------------------------------------------------------------------

      / Pause all running workers temporarily
      /
      / Some RPC commands to BESS or individual modules/ports require that
      / threads must be inactive, to avoid race conditions.
      / For such commands, use PauseALl at the beginning and ResumeAll at the end.
      /  PauseAll()
      /   SomeCommand1()
      /   SomeCommand2()
      /   ...
      /  ResumeAll()
      / Keep the duration as short as possible, to avoid packet drops.
      """
      raise NotImplementedError()
    PauseAll.future = None
    def PauseWorker(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Pause the specified worker temporarily
      /
      / Some RPC commands to BESS or individual modules/ports require that
      / threads must be inactive, to avoid race conditions.
      / For such commands, use PauseWorker at the beginning and ResumeWorker at the end.
      /  PauseWorker(0)
      /   SomeCommand1()
      /   SomeCommand2()
      /   ...
      /  ResumeWorker(0)
      / Keep the duration as short as possible, to avoid packet drops.
      """
      raise NotImplementedError()
    PauseWorker.future = None
    def ResumeWorker(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Resume the specified worker
      """
      raise NotImplementedError()
    ResumeWorker.future = None
    def ResumeAll(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Resume all paused workers
      """
      raise NotImplementedError()
    ResumeAll.future = None
    def ResetWorkers(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Remove all existing workers
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    ResetWorkers.future = None
    def ListWorkers(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Enumerate all existing workers
      """
      raise NotImplementedError()
    ListWorkers.future = None
    def AddWorker(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Create a new worker
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    AddWorker.future = None
    def DestroyWorker(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Remove a single worker
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    DestroyWorker.future = None
    def ResetTcs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """-------------------------------------------------------------------------
      Traffic classe & task
      -------------------------------------------------------------------------

      / Remove all existing traffic classes
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    ResetTcs.future = None
    def ListTcs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Enumerate all existing workers
      """
      raise NotImplementedError()
    ListTcs.future = None
    def CheckSchedulingConstraints(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Check scheduling contraints
      """
      raise NotImplementedError()
    CheckSchedulingConstraints.future = None
    def AddTc(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Create a new traffic class
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    AddTc.future = None
    def UpdateTcParams(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Update parameters of an existing traffic class
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    UpdateTcParams.future = None
    def UpdateTcParent(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Change parent (and child arguments) of an existing traffic class
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    UpdateTcParent.future = None
    def GetTcStats(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Collect statistics of a traffic class
      """
      raise NotImplementedError()
    GetTcStats.future = None
    def ListDrivers(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """-------------------------------------------------------------------------
      Port
      -------------------------------------------------------------------------

      / Enumerate all port drivers available
      """
      raise NotImplementedError()
    ListDrivers.future = None
    def GetDriverInfo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Query detailed information of a port driver
      """
      raise NotImplementedError()
    GetDriverInfo.future = None
    def ResetPorts(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Remove all initialized ports
      /
      / Will fail if there are modules that are still using ports.
      / (e.g., PortInc, PortOut, QueueInc, QueueOut)
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    ResetPorts.future = None
    def ListPorts(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Enumerate all initialized ports
      """
      raise NotImplementedError()
    ListPorts.future = None
    def CreatePort(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Create a new port from the specified driver
      """
      raise NotImplementedError()
    CreatePort.future = None
    def DestroyPort(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Remove a port
      /
      / The port should not be being used by a port-related module.
      / (e.g., PortInc, PortOut, QueueInc, QueueOut)
      """
      raise NotImplementedError()
    DestroyPort.future = None
    def SetPortConf(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Runtime-updatable configuration
      """
      raise NotImplementedError()
    SetPortConf.future = None
    def GetPortConf(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetPortConf.future = None
    def GetPortStats(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Collect port statistics
      /
      / At the moment, per-queue stats are not supported.
      """
      raise NotImplementedError()
    GetPortStats.future = None
    def GetLinkStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Query link status
      """
      raise NotImplementedError()
    GetLinkStatus.future = None
    def ListMclass(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """TODO: Add PortCommand, like ModuleCommand, which performs driver-specific
      actions on a port.

      -------------------------------------------------------------------------
      Module
      -------------------------------------------------------------------------

      / Enumerate all module types available
      """
      raise NotImplementedError()
    ListMclass.future = None
    def GetMclassInfo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Query detailed information of a module type
      """
      raise NotImplementedError()
    GetMclassInfo.future = None
    def ResetModules(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Remove all modules.
      /
      / This RPC will always succeed (unless there is a running worker)
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    ResetModules.future = None
    def ListModules(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Enumerate all initialized modules
      """
      raise NotImplementedError()
    ListModules.future = None
    def CreateModule(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Create a new module instance from the given module type
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    CreateModule.future = None
    def DestroyModule(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Destroy an exsting module
      /
      / If the module is connected to other modules' input/output gate, they are
      / disconnected first. All tasks created by the module will also be destoyed.
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    DestroyModule.future = None
    def GetModuleInfo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Fetch detailed information of an module instance
      """
      raise NotImplementedError()
    GetModuleInfo.future = None
    def ConnectModules(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Connect two modules.
      /
      / Connect between m1's ogate and n2's igate (i.e., ackets sent to m1's ogate
      / will be fed to m2's igate). The oate can be connected to only one igate,
      / while the igate can be connected to multiple output gates.
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    ConnectModules.future = None
    def DisconnectModules(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Disconnect two modules.
      /
      / It removes a connection between two modules (you specify the previous one
      / and its output gate). All packets coming out from the ogate will be
      / dropped. Once disconnected, the ogate can be connected
      / to any input gate.
      /
      / NOTE: There should be no running worker to run this command.
      """
      raise NotImplementedError()
    DisconnectModules.future = None
    def DumpMempool(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Dump various stats about BESS's packet pools
      """
      raise NotImplementedError()
    DumpMempool.future = None
    def ModuleCommand(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Send a command to the specified module instance.
      /
      / Each module type defines a list of modyle-specific commands, which
      / allow external programs to communicate with the module at runtime.
      / See module_msg.proto for details.
      /
      / NOTE: Some commands cannot be used if there are running workers.
      /       For those commands you must pause all workers first.
      """
      raise NotImplementedError()
    ModuleCommand.future = None
    def ListGateHookClass(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """-------------------------------------------------------------------------
      Gate hooks
      -------------------------------------------------------------------------

      / Enumerate all gatehook types available
      """
      raise NotImplementedError()
    ListGateHookClass.future = None
    def GetGateHookClassInfo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Query detailed information of a gatehook type
      """
      raise NotImplementedError()
    GetGateHookClassInfo.future = None
    def ConfigureGateHook(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Enable/Disable a gate hook.
      """
      raise NotImplementedError()
    ConfigureGateHook.future = None
    def ListGateHooks(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Enumerate all gatehook installed
      """
      raise NotImplementedError()
    ListGateHooks.future = None
    def GateHookCommand(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """/ Send command to gate hook instance.
      """
      raise NotImplementedError()
    GateHookCommand.future = None
    def ConfigureResumeHook(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """-------------------------------------------------------------------------
      Resume hooks
      -------------------------------------------------------------------------

      / Enable/Disable a resume hook.
      """
      raise NotImplementedError()
    ConfigureResumeHook.future = None


  def beta_create_BESSControl_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('bess.pb.BESSControl', 'AddTc'): bess__msg__pb2.AddTcRequest.FromString,
      ('bess.pb.BESSControl', 'AddWorker'): bess__msg__pb2.AddWorkerRequest.FromString,
      ('bess.pb.BESSControl', 'CheckSchedulingConstraints'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ConfigureGateHook'): bess__msg__pb2.ConfigureGateHookRequest.FromString,
      ('bess.pb.BESSControl', 'ConfigureResumeHook'): bess__msg__pb2.ConfigureResumeHookRequest.FromString,
      ('bess.pb.BESSControl', 'ConnectModules'): bess__msg__pb2.ConnectModulesRequest.FromString,
      ('bess.pb.BESSControl', 'CreateModule'): bess__msg__pb2.CreateModuleRequest.FromString,
      ('bess.pb.BESSControl', 'CreatePort'): bess__msg__pb2.CreatePortRequest.FromString,
      ('bess.pb.BESSControl', 'DestroyModule'): bess__msg__pb2.DestroyModuleRequest.FromString,
      ('bess.pb.BESSControl', 'DestroyPort'): bess__msg__pb2.DestroyPortRequest.FromString,
      ('bess.pb.BESSControl', 'DestroyWorker'): bess__msg__pb2.DestroyWorkerRequest.FromString,
      ('bess.pb.BESSControl', 'DisconnectModules'): bess__msg__pb2.DisconnectModulesRequest.FromString,
      ('bess.pb.BESSControl', 'DumpMempool'): bess__msg__pb2.DumpMempoolRequest.FromString,
      ('bess.pb.BESSControl', 'GateHookCommand'): bess__msg__pb2.GateHookCommandRequest.FromString,
      ('bess.pb.BESSControl', 'GetDriverInfo'): bess__msg__pb2.GetDriverInfoRequest.FromString,
      ('bess.pb.BESSControl', 'GetGateHookClassInfo'): bess__msg__pb2.GetGateHookClassInfoRequest.FromString,
      ('bess.pb.BESSControl', 'GetLinkStatus'): bess__msg__pb2.GetLinkStatusRequest.FromString,
      ('bess.pb.BESSControl', 'GetMclassInfo'): bess__msg__pb2.GetMclassInfoRequest.FromString,
      ('bess.pb.BESSControl', 'GetModuleInfo'): bess__msg__pb2.GetModuleInfoRequest.FromString,
      ('bess.pb.BESSControl', 'GetPortConf'): bess__msg__pb2.GetPortConfRequest.FromString,
      ('bess.pb.BESSControl', 'GetPortStats'): bess__msg__pb2.GetPortStatsRequest.FromString,
      ('bess.pb.BESSControl', 'GetTcStats'): bess__msg__pb2.GetTcStatsRequest.FromString,
      ('bess.pb.BESSControl', 'GetVersion'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ImportPlugin'): bess__msg__pb2.ImportPluginRequest.FromString,
      ('bess.pb.BESSControl', 'KillBess'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ListDrivers'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ListGateHookClass'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ListGateHooks'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ListMclass'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ListModules'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ListPlugins'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ListPorts'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ListTcs'): bess__msg__pb2.ListTcsRequest.FromString,
      ('bess.pb.BESSControl', 'ListWorkers'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ModuleCommand'): bess__msg__pb2.CommandRequest.FromString,
      ('bess.pb.BESSControl', 'PauseAll'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'PauseWorker'): bess__msg__pb2.PauseWorkerRequest.FromString,
      ('bess.pb.BESSControl', 'ResetAll'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ResetModules'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ResetPorts'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ResetTcs'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ResetWorkers'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ResumeAll'): bess__msg__pb2.EmptyRequest.FromString,
      ('bess.pb.BESSControl', 'ResumeWorker'): bess__msg__pb2.ResumeWorkerRequest.FromString,
      ('bess.pb.BESSControl', 'SetPortConf'): bess__msg__pb2.SetPortConfRequest.FromString,
      ('bess.pb.BESSControl', 'UnloadPlugin'): bess__msg__pb2.UnloadPluginRequest.FromString,
      ('bess.pb.BESSControl', 'UpdateTcParams'): bess__msg__pb2.UpdateTcParamsRequest.FromString,
      ('bess.pb.BESSControl', 'UpdateTcParent'): bess__msg__pb2.UpdateTcParentRequest.FromString,
    }
    response_serializers = {
      ('bess.pb.BESSControl', 'AddTc'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'AddWorker'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'CheckSchedulingConstraints'): bess__msg__pb2.CheckSchedulingConstraintsResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ConfigureGateHook'): bess__msg__pb2.ConfigureGateHookResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ConfigureResumeHook'): bess__msg__pb2.CommandResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ConnectModules'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'CreateModule'): bess__msg__pb2.CreateModuleResponse.SerializeToString,
      ('bess.pb.BESSControl', 'CreatePort'): bess__msg__pb2.CreatePortResponse.SerializeToString,
      ('bess.pb.BESSControl', 'DestroyModule'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'DestroyPort'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'DestroyWorker'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'DisconnectModules'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'DumpMempool'): bess__msg__pb2.DumpMempoolResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GateHookCommand'): bess__msg__pb2.CommandResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GetDriverInfo'): bess__msg__pb2.GetDriverInfoResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GetGateHookClassInfo'): bess__msg__pb2.GetGateHookClassInfoResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GetLinkStatus'): bess__msg__pb2.GetLinkStatusResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GetMclassInfo'): bess__msg__pb2.GetMclassInfoResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GetModuleInfo'): bess__msg__pb2.GetModuleInfoResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GetPortConf'): bess__msg__pb2.GetPortConfResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GetPortStats'): bess__msg__pb2.GetPortStatsResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GetTcStats'): bess__msg__pb2.GetTcStatsResponse.SerializeToString,
      ('bess.pb.BESSControl', 'GetVersion'): bess__msg__pb2.VersionResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ImportPlugin'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'KillBess'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ListDrivers'): bess__msg__pb2.ListDriversResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ListGateHookClass'): bess__msg__pb2.ListGateHookClassResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ListGateHooks'): bess__msg__pb2.ListGateHooksResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ListMclass'): bess__msg__pb2.ListMclassResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ListModules'): bess__msg__pb2.ListModulesResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ListPlugins'): bess__msg__pb2.ListPluginsResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ListPorts'): bess__msg__pb2.ListPortsResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ListTcs'): bess__msg__pb2.ListTcsResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ListWorkers'): bess__msg__pb2.ListWorkersResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ModuleCommand'): bess__msg__pb2.CommandResponse.SerializeToString,
      ('bess.pb.BESSControl', 'PauseAll'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'PauseWorker'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ResetAll'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ResetModules'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ResetPorts'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ResetTcs'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ResetWorkers'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ResumeAll'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'ResumeWorker'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'SetPortConf'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'UnloadPlugin'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'UpdateTcParams'): bess__msg__pb2.EmptyResponse.SerializeToString,
      ('bess.pb.BESSControl', 'UpdateTcParent'): bess__msg__pb2.EmptyResponse.SerializeToString,
    }
    method_implementations = {
      ('bess.pb.BESSControl', 'AddTc'): face_utilities.unary_unary_inline(servicer.AddTc),
      ('bess.pb.BESSControl', 'AddWorker'): face_utilities.unary_unary_inline(servicer.AddWorker),
      ('bess.pb.BESSControl', 'CheckSchedulingConstraints'): face_utilities.unary_unary_inline(servicer.CheckSchedulingConstraints),
      ('bess.pb.BESSControl', 'ConfigureGateHook'): face_utilities.unary_unary_inline(servicer.ConfigureGateHook),
      ('bess.pb.BESSControl', 'ConfigureResumeHook'): face_utilities.unary_unary_inline(servicer.ConfigureResumeHook),
      ('bess.pb.BESSControl', 'ConnectModules'): face_utilities.unary_unary_inline(servicer.ConnectModules),
      ('bess.pb.BESSControl', 'CreateModule'): face_utilities.unary_unary_inline(servicer.CreateModule),
      ('bess.pb.BESSControl', 'CreatePort'): face_utilities.unary_unary_inline(servicer.CreatePort),
      ('bess.pb.BESSControl', 'DestroyModule'): face_utilities.unary_unary_inline(servicer.DestroyModule),
      ('bess.pb.BESSControl', 'DestroyPort'): face_utilities.unary_unary_inline(servicer.DestroyPort),
      ('bess.pb.BESSControl', 'DestroyWorker'): face_utilities.unary_unary_inline(servicer.DestroyWorker),
      ('bess.pb.BESSControl', 'DisconnectModules'): face_utilities.unary_unary_inline(servicer.DisconnectModules),
      ('bess.pb.BESSControl', 'DumpMempool'): face_utilities.unary_unary_inline(servicer.DumpMempool),
      ('bess.pb.BESSControl', 'GateHookCommand'): face_utilities.unary_unary_inline(servicer.GateHookCommand),
      ('bess.pb.BESSControl', 'GetDriverInfo'): face_utilities.unary_unary_inline(servicer.GetDriverInfo),
      ('bess.pb.BESSControl', 'GetGateHookClassInfo'): face_utilities.unary_unary_inline(servicer.GetGateHookClassInfo),
      ('bess.pb.BESSControl', 'GetLinkStatus'): face_utilities.unary_unary_inline(servicer.GetLinkStatus),
      ('bess.pb.BESSControl', 'GetMclassInfo'): face_utilities.unary_unary_inline(servicer.GetMclassInfo),
      ('bess.pb.BESSControl', 'GetModuleInfo'): face_utilities.unary_unary_inline(servicer.GetModuleInfo),
      ('bess.pb.BESSControl', 'GetPortConf'): face_utilities.unary_unary_inline(servicer.GetPortConf),
      ('bess.pb.BESSControl', 'GetPortStats'): face_utilities.unary_unary_inline(servicer.GetPortStats),
      ('bess.pb.BESSControl', 'GetTcStats'): face_utilities.unary_unary_inline(servicer.GetTcStats),
      ('bess.pb.BESSControl', 'GetVersion'): face_utilities.unary_unary_inline(servicer.GetVersion),
      ('bess.pb.BESSControl', 'ImportPlugin'): face_utilities.unary_unary_inline(servicer.ImportPlugin),
      ('bess.pb.BESSControl', 'KillBess'): face_utilities.unary_unary_inline(servicer.KillBess),
      ('bess.pb.BESSControl', 'ListDrivers'): face_utilities.unary_unary_inline(servicer.ListDrivers),
      ('bess.pb.BESSControl', 'ListGateHookClass'): face_utilities.unary_unary_inline(servicer.ListGateHookClass),
      ('bess.pb.BESSControl', 'ListGateHooks'): face_utilities.unary_unary_inline(servicer.ListGateHooks),
      ('bess.pb.BESSControl', 'ListMclass'): face_utilities.unary_unary_inline(servicer.ListMclass),
      ('bess.pb.BESSControl', 'ListModules'): face_utilities.unary_unary_inline(servicer.ListModules),
      ('bess.pb.BESSControl', 'ListPlugins'): face_utilities.unary_unary_inline(servicer.ListPlugins),
      ('bess.pb.BESSControl', 'ListPorts'): face_utilities.unary_unary_inline(servicer.ListPorts),
      ('bess.pb.BESSControl', 'ListTcs'): face_utilities.unary_unary_inline(servicer.ListTcs),
      ('bess.pb.BESSControl', 'ListWorkers'): face_utilities.unary_unary_inline(servicer.ListWorkers),
      ('bess.pb.BESSControl', 'ModuleCommand'): face_utilities.unary_unary_inline(servicer.ModuleCommand),
      ('bess.pb.BESSControl', 'PauseAll'): face_utilities.unary_unary_inline(servicer.PauseAll),
      ('bess.pb.BESSControl', 'PauseWorker'): face_utilities.unary_unary_inline(servicer.PauseWorker),
      ('bess.pb.BESSControl', 'ResetAll'): face_utilities.unary_unary_inline(servicer.ResetAll),
      ('bess.pb.BESSControl', 'ResetModules'): face_utilities.unary_unary_inline(servicer.ResetModules),
      ('bess.pb.BESSControl', 'ResetPorts'): face_utilities.unary_unary_inline(servicer.ResetPorts),
      ('bess.pb.BESSControl', 'ResetTcs'): face_utilities.unary_unary_inline(servicer.ResetTcs),
      ('bess.pb.BESSControl', 'ResetWorkers'): face_utilities.unary_unary_inline(servicer.ResetWorkers),
      ('bess.pb.BESSControl', 'ResumeAll'): face_utilities.unary_unary_inline(servicer.ResumeAll),
      ('bess.pb.BESSControl', 'ResumeWorker'): face_utilities.unary_unary_inline(servicer.ResumeWorker),
      ('bess.pb.BESSControl', 'SetPortConf'): face_utilities.unary_unary_inline(servicer.SetPortConf),
      ('bess.pb.BESSControl', 'UnloadPlugin'): face_utilities.unary_unary_inline(servicer.UnloadPlugin),
      ('bess.pb.BESSControl', 'UpdateTcParams'): face_utilities.unary_unary_inline(servicer.UpdateTcParams),
      ('bess.pb.BESSControl', 'UpdateTcParent'): face_utilities.unary_unary_inline(servicer.UpdateTcParent),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_BESSControl_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('bess.pb.BESSControl', 'AddTc'): bess__msg__pb2.AddTcRequest.SerializeToString,
      ('bess.pb.BESSControl', 'AddWorker'): bess__msg__pb2.AddWorkerRequest.SerializeToString,
      ('bess.pb.BESSControl', 'CheckSchedulingConstraints'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ConfigureGateHook'): bess__msg__pb2.ConfigureGateHookRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ConfigureResumeHook'): bess__msg__pb2.ConfigureResumeHookRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ConnectModules'): bess__msg__pb2.ConnectModulesRequest.SerializeToString,
      ('bess.pb.BESSControl', 'CreateModule'): bess__msg__pb2.CreateModuleRequest.SerializeToString,
      ('bess.pb.BESSControl', 'CreatePort'): bess__msg__pb2.CreatePortRequest.SerializeToString,
      ('bess.pb.BESSControl', 'DestroyModule'): bess__msg__pb2.DestroyModuleRequest.SerializeToString,
      ('bess.pb.BESSControl', 'DestroyPort'): bess__msg__pb2.DestroyPortRequest.SerializeToString,
      ('bess.pb.BESSControl', 'DestroyWorker'): bess__msg__pb2.DestroyWorkerRequest.SerializeToString,
      ('bess.pb.BESSControl', 'DisconnectModules'): bess__msg__pb2.DisconnectModulesRequest.SerializeToString,
      ('bess.pb.BESSControl', 'DumpMempool'): bess__msg__pb2.DumpMempoolRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GateHookCommand'): bess__msg__pb2.GateHookCommandRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GetDriverInfo'): bess__msg__pb2.GetDriverInfoRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GetGateHookClassInfo'): bess__msg__pb2.GetGateHookClassInfoRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GetLinkStatus'): bess__msg__pb2.GetLinkStatusRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GetMclassInfo'): bess__msg__pb2.GetMclassInfoRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GetModuleInfo'): bess__msg__pb2.GetModuleInfoRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GetPortConf'): bess__msg__pb2.GetPortConfRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GetPortStats'): bess__msg__pb2.GetPortStatsRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GetTcStats'): bess__msg__pb2.GetTcStatsRequest.SerializeToString,
      ('bess.pb.BESSControl', 'GetVersion'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ImportPlugin'): bess__msg__pb2.ImportPluginRequest.SerializeToString,
      ('bess.pb.BESSControl', 'KillBess'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ListDrivers'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ListGateHookClass'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ListGateHooks'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ListMclass'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ListModules'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ListPlugins'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ListPorts'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ListTcs'): bess__msg__pb2.ListTcsRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ListWorkers'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ModuleCommand'): bess__msg__pb2.CommandRequest.SerializeToString,
      ('bess.pb.BESSControl', 'PauseAll'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'PauseWorker'): bess__msg__pb2.PauseWorkerRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ResetAll'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ResetModules'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ResetPorts'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ResetTcs'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ResetWorkers'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ResumeAll'): bess__msg__pb2.EmptyRequest.SerializeToString,
      ('bess.pb.BESSControl', 'ResumeWorker'): bess__msg__pb2.ResumeWorkerRequest.SerializeToString,
      ('bess.pb.BESSControl', 'SetPortConf'): bess__msg__pb2.SetPortConfRequest.SerializeToString,
      ('bess.pb.BESSControl', 'UnloadPlugin'): bess__msg__pb2.UnloadPluginRequest.SerializeToString,
      ('bess.pb.BESSControl', 'UpdateTcParams'): bess__msg__pb2.UpdateTcParamsRequest.SerializeToString,
      ('bess.pb.BESSControl', 'UpdateTcParent'): bess__msg__pb2.UpdateTcParentRequest.SerializeToString,
    }
    response_deserializers = {
      ('bess.pb.BESSControl', 'AddTc'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'AddWorker'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'CheckSchedulingConstraints'): bess__msg__pb2.CheckSchedulingConstraintsResponse.FromString,
      ('bess.pb.BESSControl', 'ConfigureGateHook'): bess__msg__pb2.ConfigureGateHookResponse.FromString,
      ('bess.pb.BESSControl', 'ConfigureResumeHook'): bess__msg__pb2.CommandResponse.FromString,
      ('bess.pb.BESSControl', 'ConnectModules'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'CreateModule'): bess__msg__pb2.CreateModuleResponse.FromString,
      ('bess.pb.BESSControl', 'CreatePort'): bess__msg__pb2.CreatePortResponse.FromString,
      ('bess.pb.BESSControl', 'DestroyModule'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'DestroyPort'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'DestroyWorker'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'DisconnectModules'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'DumpMempool'): bess__msg__pb2.DumpMempoolResponse.FromString,
      ('bess.pb.BESSControl', 'GateHookCommand'): bess__msg__pb2.CommandResponse.FromString,
      ('bess.pb.BESSControl', 'GetDriverInfo'): bess__msg__pb2.GetDriverInfoResponse.FromString,
      ('bess.pb.BESSControl', 'GetGateHookClassInfo'): bess__msg__pb2.GetGateHookClassInfoResponse.FromString,
      ('bess.pb.BESSControl', 'GetLinkStatus'): bess__msg__pb2.GetLinkStatusResponse.FromString,
      ('bess.pb.BESSControl', 'GetMclassInfo'): bess__msg__pb2.GetMclassInfoResponse.FromString,
      ('bess.pb.BESSControl', 'GetModuleInfo'): bess__msg__pb2.GetModuleInfoResponse.FromString,
      ('bess.pb.BESSControl', 'GetPortConf'): bess__msg__pb2.GetPortConfResponse.FromString,
      ('bess.pb.BESSControl', 'GetPortStats'): bess__msg__pb2.GetPortStatsResponse.FromString,
      ('bess.pb.BESSControl', 'GetTcStats'): bess__msg__pb2.GetTcStatsResponse.FromString,
      ('bess.pb.BESSControl', 'GetVersion'): bess__msg__pb2.VersionResponse.FromString,
      ('bess.pb.BESSControl', 'ImportPlugin'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'KillBess'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'ListDrivers'): bess__msg__pb2.ListDriversResponse.FromString,
      ('bess.pb.BESSControl', 'ListGateHookClass'): bess__msg__pb2.ListGateHookClassResponse.FromString,
      ('bess.pb.BESSControl', 'ListGateHooks'): bess__msg__pb2.ListGateHooksResponse.FromString,
      ('bess.pb.BESSControl', 'ListMclass'): bess__msg__pb2.ListMclassResponse.FromString,
      ('bess.pb.BESSControl', 'ListModules'): bess__msg__pb2.ListModulesResponse.FromString,
      ('bess.pb.BESSControl', 'ListPlugins'): bess__msg__pb2.ListPluginsResponse.FromString,
      ('bess.pb.BESSControl', 'ListPorts'): bess__msg__pb2.ListPortsResponse.FromString,
      ('bess.pb.BESSControl', 'ListTcs'): bess__msg__pb2.ListTcsResponse.FromString,
      ('bess.pb.BESSControl', 'ListWorkers'): bess__msg__pb2.ListWorkersResponse.FromString,
      ('bess.pb.BESSControl', 'ModuleCommand'): bess__msg__pb2.CommandResponse.FromString,
      ('bess.pb.BESSControl', 'PauseAll'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'PauseWorker'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'ResetAll'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'ResetModules'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'ResetPorts'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'ResetTcs'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'ResetWorkers'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'ResumeAll'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'ResumeWorker'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'SetPortConf'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'UnloadPlugin'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'UpdateTcParams'): bess__msg__pb2.EmptyResponse.FromString,
      ('bess.pb.BESSControl', 'UpdateTcParent'): bess__msg__pb2.EmptyResponse.FromString,
    }
    cardinalities = {
      'AddTc': cardinality.Cardinality.UNARY_UNARY,
      'AddWorker': cardinality.Cardinality.UNARY_UNARY,
      'CheckSchedulingConstraints': cardinality.Cardinality.UNARY_UNARY,
      'ConfigureGateHook': cardinality.Cardinality.UNARY_UNARY,
      'ConfigureResumeHook': cardinality.Cardinality.UNARY_UNARY,
      'ConnectModules': cardinality.Cardinality.UNARY_UNARY,
      'CreateModule': cardinality.Cardinality.UNARY_UNARY,
      'CreatePort': cardinality.Cardinality.UNARY_UNARY,
      'DestroyModule': cardinality.Cardinality.UNARY_UNARY,
      'DestroyPort': cardinality.Cardinality.UNARY_UNARY,
      'DestroyWorker': cardinality.Cardinality.UNARY_UNARY,
      'DisconnectModules': cardinality.Cardinality.UNARY_UNARY,
      'DumpMempool': cardinality.Cardinality.UNARY_UNARY,
      'GateHookCommand': cardinality.Cardinality.UNARY_UNARY,
      'GetDriverInfo': cardinality.Cardinality.UNARY_UNARY,
      'GetGateHookClassInfo': cardinality.Cardinality.UNARY_UNARY,
      'GetLinkStatus': cardinality.Cardinality.UNARY_UNARY,
      'GetMclassInfo': cardinality.Cardinality.UNARY_UNARY,
      'GetModuleInfo': cardinality.Cardinality.UNARY_UNARY,
      'GetPortConf': cardinality.Cardinality.UNARY_UNARY,
      'GetPortStats': cardinality.Cardinality.UNARY_UNARY,
      'GetTcStats': cardinality.Cardinality.UNARY_UNARY,
      'GetVersion': cardinality.Cardinality.UNARY_UNARY,
      'ImportPlugin': cardinality.Cardinality.UNARY_UNARY,
      'KillBess': cardinality.Cardinality.UNARY_UNARY,
      'ListDrivers': cardinality.Cardinality.UNARY_UNARY,
      'ListGateHookClass': cardinality.Cardinality.UNARY_UNARY,
      'ListGateHooks': cardinality.Cardinality.UNARY_UNARY,
      'ListMclass': cardinality.Cardinality.UNARY_UNARY,
      'ListModules': cardinality.Cardinality.UNARY_UNARY,
      'ListPlugins': cardinality.Cardinality.UNARY_UNARY,
      'ListPorts': cardinality.Cardinality.UNARY_UNARY,
      'ListTcs': cardinality.Cardinality.UNARY_UNARY,
      'ListWorkers': cardinality.Cardinality.UNARY_UNARY,
      'ModuleCommand': cardinality.Cardinality.UNARY_UNARY,
      'PauseAll': cardinality.Cardinality.UNARY_UNARY,
      'PauseWorker': cardinality.Cardinality.UNARY_UNARY,
      'ResetAll': cardinality.Cardinality.UNARY_UNARY,
      'ResetModules': cardinality.Cardinality.UNARY_UNARY,
      'ResetPorts': cardinality.Cardinality.UNARY_UNARY,
      'ResetTcs': cardinality.Cardinality.UNARY_UNARY,
      'ResetWorkers': cardinality.Cardinality.UNARY_UNARY,
      'ResumeAll': cardinality.Cardinality.UNARY_UNARY,
      'ResumeWorker': cardinality.Cardinality.UNARY_UNARY,
      'SetPortConf': cardinality.Cardinality.UNARY_UNARY,
      'UnloadPlugin': cardinality.Cardinality.UNARY_UNARY,
      'UpdateTcParams': cardinality.Cardinality.UNARY_UNARY,
      'UpdateTcParent': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'bess.pb.BESSControl', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
